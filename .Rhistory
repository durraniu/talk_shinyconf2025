install.packages("rhino")
library(shiny)
library(bslib)
# Define UI
ui <- page_fluid(
title = "Custom Sidebar Example",
# Include custom CSS
tags$head(
tags$style(
"/* -----------------Sidebar------------------- */
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle {
padding: 15px 10px;
background-color: var(--bs-primary);
position: absolute;
border-radius: 0 5px 5px 0;
writing-mode: vertical-rl;
text-orientation: mixed;
height: auto;
z-index: 1000;
display: flex;
align-items: center;
justify-content: center;
transition: all 0.3s;
top: 100px;
right: -40px;
}
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle > .collapse-icon {
fill: white !important;
margin-bottom: 10px;
}
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle::after {
color: white;
font-size: 1.1em;
text-transform: uppercase;
letter-spacing: 1px;
margin-top: 10px;
}
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle[aria-expanded='true']::after {
content: \"Close Options\";
}
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle[aria-expanded='false']::after {
content: \"Options\";
}
.custom-sidebar .bslib-sidebar-layout > .main {
margin-left: 400px;
transition: margin-left 0.3s;
width: calc(100% - $sidebar-width);
}
.custom-sidebar .bslib-sidebar-layout:not(.sidebar-open) > .collapse-toggle {
left: 0;
right: auto;
}
.custom-sidebar .bslib-sidebar-layout:not(.sidebar-open) > .main {
margin-left: 0;
width: 100%;
}
.custom-sidebar .bslib-sidebar-layout > .sidebar {
margin-left: 20px;
}"
)
),
# Wrapper div with custom-sidebar class
tags$div(
class = "custom-sidebar",
# Layout with sidebar
layout_sidebar(
sidebar = sidebar(
title = "Control Panel",
# Input controls
sliderInput("slider", "Number of observations:",
min = 10, max = 100, value = 50),
selectInput("distribution", "Distribution type:",
choices = c("Normal", "Uniform", "Log-normal", "Exponential")),
checkboxInput("density", "Add density curve", value = TRUE),
actionButton("generate", "Generate Plot", class = "btn-primary")
),
# Main content
card(
card_header("Data Visualization"),
card_body(
plotOutput("distPlot", height = "400px")
),
card_footer(
"This demo shows a histogram of random numbers with a customized sidebar."
)
)
)
)
)
# Define server logic
server <- function(input, output) {
# Generate data based on input
data <- reactive({
input$generate  # Trigger on button press
n <- input$slider
switch(input$distribution,
"Normal" = rnorm(n),
"Uniform" = runif(n),
"Log-normal" = rlnorm(n),
"Exponential" = rexp(n))
})
# Plot output
output$distPlot <- renderPlot({
x <- data()
hist(x, breaks = 30, col = "lightblue", border = "white",
main = paste(input$distribution, "Distribution"),
xlab = "Value", prob = input$density)
if(input$density) {
# Add density curve if selected
dens <- density(x)
lines(dens, col = "red", lwd = 2)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(bslib)
# Define UI
ui <- page_fluid(
title = "Custom Sidebar Example",
# Include custom CSS
tags$head(
tags$style(
"/* -----------------Sidebar------------------- */
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle {
padding: 15px 10px;
background-color: var(--bs-primary);
position: absolute;
border-radius: 0 5px 5px 0;
writing-mode: vertical-rl;
text-orientation: mixed;
height: auto;
z-index: 1000;
display: flex;
align-items: center;
justify-content: center;
transition: all 0.3s;
top: 100px;
right: -40px;
}
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle > .collapse-icon {
fill: white !important;
margin-bottom: 10px;
}
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle::after {
color: white;
font-size: 1.1em;
text-transform: uppercase;
letter-spacing: 1px;
margin-top: 10px;
}
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle[aria-expanded='true']::after {
content: \"Close Options\";
}
.custom-sidebar .bslib-sidebar-layout > .collapse-toggle[aria-expanded='false']::after {
content: \"Options\";
}
.custom-sidebar .bslib-sidebar-layout > .main {
margin-left: 400px;
transition: margin-left 0.3s;
width: calc(100% - $sidebar-width);
}
.custom-sidebar .bslib-sidebar-layout:not(.sidebar-open) > .collapse-toggle {
left: 0;
right: auto;
}
.custom-sidebar .bslib-sidebar-layout:not(.sidebar-open) > .main {
margin-left: 0;
width: 100%;
}
.custom-sidebar .bslib-sidebar-layout > .sidebar {
margin-left: 20px;
}"
)
),
# Wrapper div with custom-sidebar class
tags$div(
# class = "custom-sidebar",
# Layout with sidebar
layout_sidebar(
sidebar = sidebar(
class = "custom-sidebar",
title = "Control Panel",
# Input controls
sliderInput("slider", "Number of observations:",
min = 10, max = 100, value = 50),
selectInput("distribution", "Distribution type:",
choices = c("Normal", "Uniform", "Log-normal", "Exponential")),
checkboxInput("density", "Add density curve", value = TRUE),
actionButton("generate", "Generate Plot", class = "btn-primary")
),
# Main content
card(
card_header("Data Visualization"),
card_body(
plotOutput("distPlot", height = "400px")
),
card_footer(
"This demo shows a histogram of random numbers with a customized sidebar."
)
)
)
)
)
# Define server logic
server <- function(input, output) {
# Generate data based on input
data <- reactive({
input$generate  # Trigger on button press
n <- input$slider
switch(input$distribution,
"Normal" = rnorm(n),
"Uniform" = runif(n),
"Log-normal" = rlnorm(n),
"Exponential" = rexp(n))
})
# Plot output
output$distPlot <- renderPlot({
x <- data()
hist(x, breaks = 30, col = "lightblue", border = "white",
main = paste(input$distribution, "Distribution"),
xlab = "Value", prob = input$density)
if(input$density) {
# Add density curve if selected
dens <- density(x)
lines(dens, col = "red", lwd = 2)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
