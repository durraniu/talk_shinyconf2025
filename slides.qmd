---
pagetitle: "Building Your Pit of Success"
format: 
  revealjs:
    transition: "fade"
    backgroundTransition: "fade"
    height: 1000
    width: 1600
    margin: 0.05
    highlight-style: oblivion
    theme: [night, assets/custom.scss]
---

##  {background-image="assets/images/flow1.jpg"}

[Building Your Pit of Success]{.custom-title}

[Practical Strategies for Shiny App]{.custom-subtitle1}
[Development and Deployment]{.custom-subtitle2}

[Umair Durrani]{.custom-author}

[[https://dru.quarto.pub/slides-de54/](https://dru.quarto.pub/slides-de54/)]{.custom-url}


## About Me


> Umair Durrani 


::: {.fragment}
- Data Scientist and Shiny Developer at Presage Group Inc. 
  - Develop apps
  - Analyze and present data
:::

::: {.fragment}
- [Shiny Meetings](https://github.com/shiny-meetings/shiny-meetings)  
:::


## About You

:::: columns
::: {.column width="50%"}
::: {.fragment}
<h4>Cat in Flow</h4>

<img src="assets/images/flow1.jpg" width="500" height="300"> 
<br>

> Cat is a solitary animal, but its home is devastated by a great flood
(IMDB)
:::

:::


::: {.column width="50%"}
::: {.fragment}
<h4>New Shiny Developer</h4>

<img src="assets/images/developer1.jpg" width="500" height="300"> 
<br>

> You work with data, but now need to create software, i.e., shiny
:::
:::
::::


::: {.fragment}
[Practical strategies for development and deployment]{.custom-subtitle3}
:::


## Strategies

<ol class="custom-numbered-list">
  <li>Creating beautiful app layouts</li>
  <li>Write robust code</li>
  <li>Monitor your app</li>
  <li>Improve user experience</li>
  <li>Explore deployment options</li>
  <li>Learn and Practice</li>
</ol>


## Demo App

- [Google Cloud Run Link](https://storytime-140459561836.us-central1.run.app){preview-link="true"}  



- [Shinyapps Link](https://storytime-140459561836.us-central1.run.app/){preview-link="true"}

## Demo Video

{{< video assets/videos/app_overview.mp4 >}}


# 1. Creating Beautiful Layouts

## Use AI Tools

- [Shiny Assistant](https://gallery.shinyapps.io/assistant/#) is trained on Shiny source code  

  * Available for both Shiny for R and Python  
  
<br>
  
- [Ploomber AI Editor](https://editor.ploomber.io/) has more features:  

  * Provide an image with text instructions  
  * Download complete project  
  
::: {.fragment}
[Both heavily use `bslib`]{.custom-subtitle3}
:::
  
## Ploomber AI Editor Example

:::: columns
::: {.column width="50%"}
::: {.fragment}

<h4>Inspiration</h4>

<img src="assets/images/story_spark.PNG" width="500" height="300"> 
<br>

**Prompt:** Create a shiny app that replicates the user interface in the attached image. Clicking the "create story" button should scroll to the "create your story" section. Skip the "try it for free" link.
:::

:::


::: {.column width="50%"}
::: {.fragment}
<h4>Result</h4>

<img src="assets/images/story_ploomber.gif" width="500" height="300"> 
<br>

[Ploomber project link](https://editor.ploomber.io/editor/story-creator-fc9e)
:::
:::
::::

## Layout with bslib

`bslib::navset_bar` in `bslib::page_fluid`

<img src="assets/images/layout1.png"> 


## Layout with bslib

Responsive Design with `bslib::layout_columns`

<img src="assets/images/layout2.png"> 

## brand.yml for theming

::: {.fragment}
- Create a [`_brand.yml`](https://posit-dev.github.io/brand-yml/) file in the root of your directory or in `inst` in a package based project  

```{r}
#| echo: true
#| eval: false
meta:
  name: stoRytime
  description: |
    Create beautiful and alive stories with text-generation and image-generation models!

color:
  palette:
    foregroundcolor: "#61212D"
    backgroundcolor: "#ffffff"
    secondarycolor: "#03A9F4"
    infocolor: "#00BCD4"
  foreground: foregroundcolor
  background: backgroundcolor
  primary: foregroundcolor
  secondary: secondarycolor
  info: infocolor

typography:
  fonts:
    - family: ABeeZee
      source: bunny
    - family: Architects Daughter
      source: bunny
    - family: sans-serif
      source: system

  base:
    family: ABeeZee, sans-serif
  headings:
    family: Architects Daughter, sans-serif
```
:::


::: {.fragment}
- Then use it in shiny:  
```{r}
#| echo: true
#| eval: false
page_fluid(
   theme = bslib::bs_theme(brand = "path_to_brand_yml") # or TRUE
)
```
:::

## brand.yml for theming

- Use name in `meta`, logos, fonts with plots, etc. For example, in `global.R`:  

```{r}
#| echo: true
#| eval: false
theme <- bslib::bs_theme(brand = "path_to_brand_yml")
brand <- attr(theme, "brand")
app_name <- brand$meta$name$short
app_desc <- brand$meta$description
```

<img src="assets/images/brand.png"> 


## Sass for Customization

:::: columns
::: {.column width="70%"}
- Sass for customizing sidebar button
```{sass}
#| echo: true
#| eval: false
/* ---------------Sidebar options-------------- */
$sidebar-width: 400px
$sidebar-transition: 0.3s
$toggle-bg: var(--bs-primary)
$toggle-color: white
$toggle-padding: 15px 10px
$toggle-radius: 0 5px 5px 0
$toggle-top: 100px
$toggle-right: -40px


/* -----------------Sidebar------------------- */
@mixin sidebar-toggle
  padding: $toggle-padding
  background-color: $toggle-bg
  position: absolute
  border-radius: $toggle-radius
  writing-mode: vertical-rl
  text-orientation: mixed
  height: auto
  z-index: 1000
  display: flex
  align-items: center
  justify-content: center
  transition: all $sidebar-transition
  top: $toggle-top
  right: $toggle-right

@mixin sidebar-main
  margin-left: $sidebar-width
  transition: margin-left $sidebar-transition
  width: calc(100% - $sidebar-width)

@mixin sidebar-closed
  left: 0
  right: auto

@mixin toggle-icon
  fill: $toggle-color !important
  margin-bottom: 10px

@mixin toggle-text
  color: $toggle-color
  font-size: 1.1em
  text-transform: uppercase
  letter-spacing: 1px
  margin-top: 10px

@mixin sidebar-layout($sidebar-name, $open-text, $closed-text)
  .#{$sidebar-name} .bslib-sidebar-layout
    > .collapse-toggle
      @include sidebar-toggle
      & > .collapse-icon
        @include toggle-icon
      &::after
        @include toggle-text
      &[aria-expanded='true']::after
        content: $open-text
      &[aria-expanded='false']::after
        content: $closed-text
    > .main
      @include sidebar-main
    &:not(.sidebar-open)
      > .collapse-toggle
        @include sidebar-closed
      > .main
        margin-left: 0
        width: 100%
    > .sidebar
      margin-left: 20px

@include sidebar-layout("custom-sidebar", "Close Options", "Options")
```
:::

::: {.column width="30%"}
<img src="assets/images/sass_sidebar.gif"> 
:::
::::


# 2. Write robust code

## Functions

- Example: Creating the 'Hero Section': 
```{r}
#| echo: true
#| eval: false
create_hero_section <- function(title, subtitle){
  div(
    class = "hero-section",
    layout_columns(
      col_widths = breakpoints(
        sm = c(-1, 10, -1),
        md = c(-1, 5, 5, -1)
      ),
      div(
        h1(title, class = "hero-title"),
        p(subtitle, class = "hero-text"),
        input_task_button("get_started", "GET STARTED", class = "btn-lg", onclick = "scrollToCards()")
      ),
      slickROutput("s")
    )
  )
}
```

[Functions Chapter from Mastering Shiny](https://mastering-shiny.org/scaling-functions.html)

## Tests

- Unit tests, `golem`, `shinytest2`  
- Example: Unit test for `get_story` function

:::: columns
::: {.column width="60%"}
Function:  
```{r}
#| echo: true
#| eval: false
get_story <- function(prompt,
                      num_of_sentences = 5,
                      max_tokens = 1000,
                      ACCOUNT_ID = Sys.getenv("ACCOUNT_ID"),
                      API_KEY = Sys.getenv("API_KEY"),
                      base_url = cf_base_url()){

  if (is.null(prompt) | num_of_sentences < 3){
    return(NULL)
  }

  if (test_profanity(prompt)){
    return(NULL)
  }
  url_txt <- paste0(base_url, ACCOUNT_ID, "/ai/run/@cf/meta/llama-3.1-8b-instruct-fast")

  # Make an API request
  response_text <- httr2::request(url_txt) |>
    httr2::req_headers(
      "Authorization" = paste("Bearer", API_KEY)
    ) |>
    httr2::req_body_json("...") |>
    httr2::req_method("POST") |>
    httr2::req_error(is_error = \(resp) FALSE) |>
    httr2::req_perform() |>
    httr2::resp_body_json()

  "<Process and return response>"
}
```

:::
  
::: {.column width="40%"}
Unit test with [`httptest2`](https://enpiar.com/httptest2/) and `testthat`:
```{r}
#| echo: true
#| eval: false
with_mock_dir("cfgsp", {
  test_that("get_story returns story when API response is successful", {
    res <- get_story("Snow white opened the door")
    expect_type(res, "character")
  })
})
```
:::
::::

[Testing Chapter from Mastering Shiny](https://mastering-shiny.org/scaling-testing.html)


## Modules

> My Shiny hot take is that modules are **not** an advanced topic. (Emily Riederer)  

[Modules avoid clutter and make debugging easier](https://emilyriederer.netlify.app/post/shiny-modules/)

- Example: **Asynchronous file downloads with `ExtendedTask` and `mirai`**:  

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2|9-13|15-21|29-31|33-39|41-53"
# Module
mod_download_stories_ui <- function(id, title) {
  ns <- NS(id)
  card(
    height = 400,
    full_screen = TRUE,
    card_header(
      title,
      input_task_button(
        ns("downloadBtn"),
        label = "Download and Display",
        class = "btn-sm btn-primary"
      )
    ),
    card_body(
      tags$iframe(
        id = paste0("htmlFrame", id),
        style = "width: 100%; height: 100%; border: none;"
      )
    )
  )
}

mod_download_stories_server <- function(id, title, html_file){
  moduleServer(id, function(input, output, session){
    ns <- session$ns
    base_url <- "https://raw.githubusercontent.com/durraniu/examples-storytime/refs/heads/main/htmls/"

    task <- ExtendedTask$new(
      function(url, download_and_render_html) mirai(download_and_render_html(url), environment())
    ) |> bind_task_button("downloadBtn")

    observeEvent(input$downloadBtn, {
      # Complete URL for this HTML file
      url <- paste0(base_url, html_file)

      # Download the HTML content
      task$invoke(url, download_and_render_html)
    })

    observe({
      html_content <- task$result()

      showNotification(paste0("Rendering ", title, "..."), type = "message", duration = 2)

      # Set the iframe source to display the HTML content
      js_code <- sprintf('
          var iframe = document.getElementById("htmlFrame%s");
          iframe.srcdoc = %s;
        ', id, jsonlite::toJSON(html_content))

      shinyjs::runjs(js_code)
    })
  })
}
```

## Modules


```{r}
#| echo: true
#| eval: false
# UI:
layout_column_wrap(
    width = 1/2,
    mod_download_stories_ui("apocalypse", "Apocalypse"),
    mod_download_stories_ui("dracula", "Dracula")
)
# Server:
mod_download_stories_server("apocalypse", "Apocalypse", "apocalypse.html")
mod_download_stories_server("dracula", "Dracula", "dracula.html")
```

<img src="assets/images/modules.png"> 



# 3. Monitor your app for errors

## Use `sentryR`

> [Sentry](https://sentry.io/welcome/) is an application monitoring software  
- [`sentryR`](https://github.com/jcpsantiago/sentryR) is an unofficial R client for Sentry  


:::: columns
::: {.column width="50%"}
<img src="assets/images/sentry1.png"> 
:::
  
::: {.column width="50%"}
<img src="assets/images/sentry2.png"> 
:::
::::

## `sentryR` setup

<img src="assets/images/sentry3.png"> 

```{r}
#| echo: true
#| eval: false
sentryR::configure_sentry(
  dsn = Sys.getenv("SENTRY_KEY"),
  app_name = "stoRytime",
  app_version = "1.0.0"
)
```


## Monitor errors

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1|2-3|11|12|13-15|16|19-26|29"
get_browser_info <- function() {
  user_agent <- session$request$HTTP_USER_AGENT # browser
  remote_addr <- session$request$REMOTE_ADDR # ip
  
  list(
    user_agent = if (is.null(user_agent)) "Unknown" else user_agent,
    remote_addr = if (is.null(remote_addr)) "Unknown" else remote_addr
  )
}

error_handler <- function() {
  e <- get("e", envir = parent.frame())
  stack_trace <- shiny::printStackTrace(e) |>
    utils::capture.output(type = "message") |>
    list()
  browser <- get_browser_info()
  
  # Send the original error object with additional context to Sentry
  sentryR::capture(
    message = geterrmessage(),
    extra = list(
      Browser = browser$user_agent,
      IP = browser$remote_addr,
      "Stack trace" =  stack_trace
    )
  )
}

options(shiny.error = error_handler)
```

## Monitor errors

{{< video assets/videos/sentry.mp4 >}}


# 4. Improve user experience

## Improve user experience

- `shiny::useBusyIndicators()` or `waiter`  
- Async programming with `ExtendedTask`  
- Homepage with buttons and guides for complex apps (e.g., `cicerone`)  


# 5. Explore deployment options

## Deployment

- Simple and easy, but less flexible/costly: shinyapps.io and Posit Connect Cloud  
- Hard: Virtual machines on AWS or Google Cloud, etc.  

<br>

::: {.fragment}
- Google Cloud Run (requires docker) --> `golem`, [`shinydocker`](https://github.com/coatless-rpkg/shinydocker), etc.

<img src="assets/images/containers2.webp"> 
:::

## Deployment

{{< video assets/videos/cloud_run.mp4 >}}


# 6. Learn and Practice 



## Resources

- [Books](https://www.bigbookofr.com/chapters/shiny)  
- [Data Science Learning Community (DSLC)](https://dslc.io/)  
  * shiny club  
- [Shiny Meetings](https://github.com/shiny-meetings/shiny-meetings) 

## Community

- Using brand_yml: `Garrick Aden-Buie`  
- Creating custom sidebar button: `Vedha Viyash` 
- [http testing](https://books.ropensci.org/http-testing/):  `Maëlle Salmon`
- Logging (`shiny::printStackTrace`): `Tan Ho`  



## Shiny Meetings 

Learn and practice together!  

<img src="assets/images/shiny_meetings.gif"> 


## Questions

- Join Shiny Meetings: https://github.com/shiny-meetings/shiny-meetings  
- @transport-talk.bsky.social

:::: {.columns}
::: {.column width="50%"}
**Demo App**

<img src="assets/images/qr_app.png" width="250">
:::
::: {.column width="50%"}
**Demo App Source**

<img src="assets/images/qr_app_source.png" width="250">
:::
::::

:::: {.columns}
::: {.column width="50%"}
**Slides**

<img src="assets/images/qr_slides.png" width="250">
:::
::: {.column width="50%"}
**Slides Source**

<img src="assets/images/qr_slides_source.png" width="250">
:::
::::

## Image sources:

- [Flow](https://vocus-cc.translate.goog/article/67bca630fd89780001be9d21?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=en&_x_tr_pto=wapp&_x_tr_hist=true) 

- [Developer](https://unsplash.com/photos/a-man-sitting-in-front-of-a-laptop-computer-Ili1gmB9Jes)  

- [Story Spark](https://storyspark.ai/)  

- [Docker](https://nilesh93.medium.com/practical-guide-on-writing-a-dockerfile-for-your-application-89376f88b3b5)  

